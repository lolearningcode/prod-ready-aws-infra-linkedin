name: Unified CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        run: |
          REPO=${{ steps.ecr-login.outputs.registry }}/prod-ready-aws-infra-linkedin
          REPO_NAME=${REPO#*/}
          echo "Checking ECR repository: $REPO_NAME"
          if ! aws ecr describe-repositories --repository-names "$REPO_NAME" >/dev/null 2>&1; then
            echo "Repository $REPO_NAME not found, creating..."
            aws ecr create-repository --repository-name "$REPO_NAME" || true
          else
            echo "Repository $REPO_NAME already exists"
          fi

      # --- Build App ---
      - name: Build, Tag, and Push Image
        run: |
          IMAGE_URI=${{ steps.ecr-login.outputs.registry }}/prod-ready-aws-infra-linkedin:${{ github.sha }}
          docker build -t $IMAGE_URI .
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "Built image: $IMAGE_URI"

      - name: Show IMAGE_URI for TF
        run: echo "IMAGE_URI=${{ env.IMAGE_URI }}"
        
      # --- Security Scans ---
      - name: Run Trivy Image Scan
        uses: aquasecurity/trivy-action@0.16.0
        with:
          image-ref: ${{ env.IMAGE_URI }}
          severity: CRITICAL,HIGH
          exit-code: 1

      - name: Run tfsec on Terraform
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: ./envs/dev
          additional_args: --minimum-severity=HIGH

      # --- Push Only If Secure ---
      - name: Push Image (if secure)
        if: success()
        run: docker push ${{ env.IMAGE_URI }}

      # --- Terraform Setup ---
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform -chdir=./envs/dev init -input=false -reconfigure

      - name: Terraform Plan
        run: |
          terraform -chdir=./envs/dev plan \
            -var="app_image=${{ env.IMAGE_URI }}" \
            -var='create_oidc_provider=false' \
            -var='existing_oidc_provider_arn=arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:oidc-provider/token.actions.githubusercontent.com' \
            -var='create_sns_topic=false' \
            -var='manage_log_retention=false'

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform -chdir=./envs/dev apply -auto-approve \
            -var="app_image=${{ env.IMAGE_URI }}" \
            -var='create_oidc_provider=false' \
            -var='existing_oidc_provider_arn=arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:oidc-provider/token.actions.githubusercontent.com' \
            -var='create_sns_topic=false' \
            -var='manage_log_retention=false'
        env:
          AWS_REGION: us-east-1